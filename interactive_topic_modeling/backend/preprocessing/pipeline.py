from abc import ABC, abstractmethod


class TempPipeline:  # Temporary class to contain the entire pipeline without design patterns
    def __init__(self):
        pass

    def process(self, docs):
        pass


# Takes a required tokenizer, and a list of components, which are applied in-order.
# The pipeline is then used to process a list of docs (strings) into a list of lists of tokens.
class PipeLine:  # Temporary class design to represent the pipeline, generated by Copilot
    def __init__(self, tokenizer):
        self.tokenizer = tokenizer
        self.components = []

    def add_component(self, component):
        self.components.append(component)

    def process(self, docs):
        for component in self.components:
            docs = component.process(docs)
        return docs


class Component(ABC):  # Temporary abstract base class design to represent a component, generated by Copilot
    def __init__(self, name):
        self.name = name
        self.input = []
        self.output = []

    @abstractmethod
    def process(self, tokens):
        pass
